"use strict";(self.webpackChunkitmoji_client=self.webpackChunkitmoji_client||[]).push([[882],{"./src/views/announcement/ui/create-announcement-form-page.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>create_announcement_form_page_stories,초기값_없음:()=>초기값_없음,초기값_있음:()=>초기값_있음});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@15.1.6_@babel+core@7.26.0_babel-plugin-react-compiler@19.0.0-beta-decd7b8-20250118_react_l43wdczbubi7wfmk54u7tu3xru/node_modules/next/dist/compiled/react/jsx-runtime.js"),dist=__webpack_require__("./node_modules/.pnpm/@storybook+test@8.5.1_storybook@8.5.1_prettier@3.4.2_/node_modules/@storybook/test/dist/index.mjs"),announcement=__webpack_require__("./src/entities/announcement/index.ts"),Select=__webpack_require__("./node_modules/.pnpm/@mantine+core@7.16.1_@mantine+hooks@7.16.1_react@19.0.0__@types+react@19.0.8_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@mantine/core/esm/components/Select/Select.mjs"),Checkbox=__webpack_require__("./node_modules/.pnpm/@mantine+core@7.16.1_@mantine+hooks@7.16.1_react@19.0.0__@types+react@19.0.8_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@mantine/core/esm/components/Checkbox/Checkbox.mjs"),TextInput=__webpack_require__("./node_modules/.pnpm/@mantine+core@7.16.1_@mantine+hooks@7.16.1_react@19.0.0__@types+react@19.0.8_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@mantine/core/esm/components/TextInput/TextInput.mjs"),InputLabel=__webpack_require__("./node_modules/.pnpm/@mantine+core@7.16.1_@mantine+hooks@7.16.1_react@19.0.0__@types+react@19.0.8_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@mantine/core/esm/components/Input/InputLabel/InputLabel.mjs"),Button=__webpack_require__("./node_modules/.pnpm/@mantine+core@7.16.1_@mantine+hooks@7.16.1_react@19.0.0__@types+react@19.0.8_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/@mantine/core/esm/components/Button/Button.mjs"),use_form=__webpack_require__("./node_modules/.pnpm/@mantine+form@7.16.3_react@19.0.0/node_modules/@mantine/form/esm/use-form.mjs"),react=__webpack_require__("./node_modules/.pnpm/next@15.1.6_@babel+core@7.26.0_babel-plugin-react-compiler@19.0.0-beta-decd7b8-20250118_react_l43wdczbubi7wfmk54u7tu3xru/node_modules/next/dist/compiled/react/index.js"),react_hot_toast_dist=__webpack_require__("./node_modules/.pnpm/react-hot-toast@2.5.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/react-hot-toast/dist/index.mjs"),lib=__webpack_require__("./node_modules/.pnpm/zod@3.24.1/node_modules/zod/lib/index.mjs"),config=__webpack_require__("./src/shared/config/index.ts"),shared_lib=__webpack_require__("./src/shared/lib/index.ts"),ui=__webpack_require__("./src/shared/ui/index.ts");const initialValues={title:"",isPinned:!1,content:"",postCategory:announcement.m8.Enum.NOTICE},CreateAnnouncementFormPage=({fetcher=announcement.pD,revalidate=announcement.im,onSuccess=react_hot_toast_dist.Ay.success,onFailed=react_hot_toast_dist.Ay.error,onCancel,label="작성",extraButton:ExtraButton,initialBody={}})=>{const{back,push,on,off}=(0,shared_lib.rd)(),[isPending,setIsPending]=(0,react.useState)(!1),form=(0,use_form.m)({mode:"uncontrolled",initialValues:{...initialValues,...initialBody},validate:{title:value=>{const{data,error}=lib.z.string().min(1,"제목은 1자리 이상 입력해주세요").max(100,"제목은 100자 이내로 쓸 수 있어요").safeParse(value);return data?null:null==error?void 0:error.issues[0].message}}}),inputProps=form.getInputProps("isPinned");return(0,jsx_runtime.jsx)("form",{onSubmit:form.onSubmit((async body=>{setIsPending(!0),on(),await fetcher(body,(({status})=>{400<=status&&status<500&&onFailed("지정된 고정된 공지사항 수를 초과했어요")})).then((()=>revalidate(body))).then((()=>{location.pathname===config.b.ADMIN.ANNOUNCEMENT.CREATE()&&push(config.b.ADMIN.ANNOUNCEMENT()),form.setFieldValue("title",initialValues.title),form.setFieldValue("isPinned",initialValues.isPinned),form.setFieldValue("content",initialValues.content),form.setFieldValue("postCategory",initialValues.postCategory),onSuccess(`공지사항 ${label}에 성공했어요`)})).catch((()=>{off(),setIsPending(!1),onFailed(`공지사항 ${label}에 실패했어요`)}))})),children:(0,jsx_runtime.jsxs)(ui.Ls,{children:[(0,jsx_runtime.jsxs)(ui.iL,{children:[(0,jsx_runtime.jsx)(ui.In,{query:"fluent-emoji:fountain-pen",className:"mr-2 size-5"}),"공지사항 ",label]}),(0,jsx_runtime.jsxs)("div",{className:"mb-6 flex flex-wrap items-end gap-x-8 gap-y-3",children:[(0,jsx_runtime.jsx)(Select.l,{label:"유형",className:"w-32 min-w-32",defaultValue:announcement.m8.Enum.NOTICE,data:announcement.m8.options.map((category=>({value:category,label:announcement.jH[category]}))),checkIconPosition:"right",...form.getInputProps("postCategory")},form.key("postCategory")),(0,jsx_runtime.jsx)(Checkbox.S,{label:"상단 고정",classNames:{root:"h-9 flex items-center",input:"cursor-pointer",label:"cursor-pointer select-none whitespace-nowrap"},defaultChecked:inputProps.defaultValue,...inputProps},form.key("isPinned"))]}),(0,jsx_runtime.jsx)(TextInput.k,{label:"제목",placeholder:"제목을 입력해주세요",className:"mb-8",...form.getInputProps("title")},form.key("title")),(0,jsx_runtime.jsx)(InputLabel.l,{children:"내용"}),(0,jsx_runtime.jsx)(ui.tp,{placeholder:"내용을 입력해주세요",...form.getInputProps("content")},form.key("content")),(0,jsx_runtime.jsxs)("div",{className:"mt-8 flex items-center justify-end space-x-2",children:[(0,jsx_runtime.jsx)(Button.$,{variant:"light",color:"gray",onClick:null!=onCancel?onCancel:back,disabled:isPending,children:"취소"}),ExtraButton&&(0,jsx_runtime.jsx)(ExtraButton,{isPending,setIsPending}),(0,jsx_runtime.jsx)(Button.$,{type:"submit",disabled:isPending,children:"저장"})]})]})})};CreateAnnouncementFormPage.__docgenInfo={description:"",methods:[],displayName:"CreateAnnouncementFormPage",props:{fetcher:{defaultValue:{value:"(body: PostBody, onException?: ExceptionInterceptor) =>\nserver.request(POST_ENDPOINT.LIST, {\n  schema: z.any(),\n  method: 'POST',\n  body: JSON.stringify(body),\n  onException,\n})",computed:!1},required:!1},revalidate:{defaultValue:{value:"async (body: Pick<PostBody, 'isPinned'>) => {\n  const tags: string[] = [POST_TAG.LIST, POST_TAG.SEARCH]\n\n  if (body.isPinned) {\n    tags.push(POST_TAG.PINNED_LIST)\n  }\n\n  tags.forEach(revalidateTag)\n}",computed:!1},required:!1},onSuccess:{defaultValue:{value:"toast.success",computed:!0},required:!1},onFailed:{defaultValue:{value:"toast.error",computed:!0},required:!1},label:{defaultValue:{value:"'작성'",computed:!1},required:!1},initialBody:{defaultValue:{value:"{}",computed:!1},required:!1}}};const create_announcement_form_page_stories={title:"관리자 페이지/공지사항 관리/생성 및 수정 폼",component:CreateAnnouncementFormPage,parameters:{nextjs:{react:{rsc:!1},appDirectory:!0}}},초기값_없음={render:args=>(0,jsx_runtime.jsx)(CreateAnnouncementFormPage,{...args}),args:{fetcher:(0,dist.fn)((()=>new Promise((resolve=>setTimeout(resolve,100))))),revalidate:(0,dist.fn)((()=>Promise.resolve())),onSuccess:(0,dist.fn)(),onFailed:(0,dist.fn)()},play:async({args,canvasElement,step})=>{const canvas=(0,dist.ux)(canvasElement);await step("유형 선택",(async()=>{const selectEl=canvas.getByLabelText("유형"),firstCategory=selectEl.value;await dist.Q4.click(selectEl),await dist.Q4.keyboard("{ArrowDown}",{delay:50}),await dist.Q4.keyboard("{ArrowDown}",{delay:50}),await dist.Q4.keyboard("{Enter}",{delay:50}),(0,dist.E3)(selectEl).not.toBe(firstCategory)})),await step("제목 입력",(async()=>{const titleInputEl=canvas.getByLabelText("제목");await dist.Q4.type(titleInputEl,"Hello World!! 123",{delay:50}),(0,dist.E3)(titleInputEl).toHaveValue("Hello World!! 123")})),await step("공지 여부 입력",(async()=>{const checkboxEl=canvas.getByRole("checkbox"),firstValue=checkboxEl.checked;await dist.Q4.click(checkboxEl,{delay:50}),await dist.Q4.click(checkboxEl,{delay:50}),await dist.Q4.click(checkboxEl,{delay:50}),(0,dist.E3)(checkboxEl).not.toBe(firstValue)})),await step("내용 입력",(async()=>{const inputEls=canvas.getAllByRole("textbox"),editorEl=inputEls[inputEls.length-1];await dist.Q4.type(editorEl,"Hello World!! 321",{delay:50}),(0,dist.E3)(editorEl).toHaveTextContent("Hello World!! 321")})),await step("저장",(async()=>{const buttonEl=canvas.getByRole("button",{name:"저장"});await dist.Q4.click(buttonEl),await dist.Q4.click(buttonEl),await(0,dist.fm)((()=>(0,dist.E3)(args.fetcher).toHaveBeenCalled())),await(0,dist.fm)((()=>(0,dist.E3)(args.revalidate).toHaveBeenCalledOnce())),(0,dist.E3)(args.onSuccess).toHaveBeenCalledOnce(),(0,dist.E3)(args.onFailed).not.toHaveBeenCalledOnce()}))}},초기값_있음={render:args=>(0,jsx_runtime.jsx)(CreateAnnouncementFormPage,{...args}),args:{initialBody:{title:"Hello 123",isPinned:!0,content:"Hello 321",postCategory:announcement.m8.Enum.MAINTENANCE},fetcher:(0,dist.fn)((()=>new Promise((resolve=>setTimeout(resolve,100))))),revalidate:(0,dist.fn)((()=>Promise.resolve())),onSuccess:(0,dist.fn)(),onFailed:(0,dist.fn)()},play:async({args,canvasElement,step})=>{const canvas=(0,dist.ux)(canvasElement);await step("유형 선택",(async()=>{const selectEl=canvas.getByLabelText("유형"),firstCategory=selectEl.value;await dist.Q4.click(selectEl),await dist.Q4.keyboard("{ArrowDown}",{delay:50}),await dist.Q4.keyboard("{ArrowDown}",{delay:50}),await dist.Q4.keyboard("{Enter}",{delay:50}),(0,dist.E3)(selectEl).not.toBe(firstCategory)})),await step("제목 입력",(async()=>{const titleInputEl=canvas.getByLabelText("제목");(0,dist.E3)(titleInputEl).toHaveValue("Hello 123"),await dist.Q4.type(titleInputEl,"Hello World!! 123",{delay:50}),(0,dist.E3)(titleInputEl).toHaveValue("Hello 123Hello World!! 123")})),await step("공지 여부 입력",(async()=>{const checkboxEl=canvas.getByRole("checkbox"),firstValue=checkboxEl.checked;await dist.Q4.click(checkboxEl,{delay:50}),await dist.Q4.click(checkboxEl,{delay:50}),await dist.Q4.click(checkboxEl,{delay:50}),(0,dist.E3)(checkboxEl).not.toBe(firstValue)})),await step("내용 입력",(async()=>{const inputEls=canvas.getAllByRole("textbox"),editorEl=inputEls[inputEls.length-1];(0,dist.E3)(editorEl).toHaveTextContent("Hello 321"),await dist.Q4.type(editorEl,"Hello World!! 321",{delay:50}),(0,dist.E3)(editorEl).toHaveTextContent("Hello 321Hello World!! 321")})),await step("저장",(async()=>{const buttonEl=canvas.getByRole("button",{name:"저장"});await dist.Q4.click(buttonEl),await dist.Q4.click(buttonEl),await(0,dist.fm)((()=>(0,dist.E3)(args.fetcher).toHaveBeenCalled())),await(0,dist.fm)((()=>(0,dist.E3)(args.revalidate).toHaveBeenCalledOnce())),(0,dist.E3)(args.onSuccess).toHaveBeenCalledOnce(),(0,dist.E3)(args.onFailed).not.toHaveBeenCalledOnce()}))}},__namedExportsOrder=["초기값_없음","초기값_있음"];초기값_없음.parameters={...초기값_없음.parameters,docs:{...초기값_없음.parameters?.docs,source:{originalSource:"{\n  render: args => <CreateAnnouncementFormPage {...args} />,\n  args: {\n    fetcher: fn(() => new Promise(resolve => setTimeout(resolve, 100))),\n    revalidate: fn(() => Promise.resolve()),\n    onSuccess: fn(),\n    onFailed: fn()\n  },\n  play: async ({\n    args,\n    canvasElement,\n    step\n  }) => {\n    const canvas = within(canvasElement);\n    await step('유형 선택', async () => {\n      const selectEl = canvas.getByLabelText('유형') as HTMLInputElement;\n      const firstCategory = selectEl.value;\n      await userEvent.click(selectEl);\n      await userEvent.keyboard('{ArrowDown}', {\n        delay: 50\n      });\n      await userEvent.keyboard('{ArrowDown}', {\n        delay: 50\n      });\n      await userEvent.keyboard('{Enter}', {\n        delay: 50\n      });\n      expect(selectEl).not.toBe(firstCategory);\n    });\n    await step('제목 입력', async () => {\n      const titleTestValue = 'Hello World!! 123';\n      const titleInputEl = canvas.getByLabelText('제목');\n      await userEvent.type(titleInputEl, titleTestValue, {\n        delay: 50\n      });\n      expect(titleInputEl).toHaveValue(titleTestValue);\n    });\n    await step('공지 여부 입력', async () => {\n      const checkboxEl = canvas.getByRole('checkbox') as HTMLInputElement;\n      const firstValue = checkboxEl.checked;\n      await userEvent.click(checkboxEl, {\n        delay: 50\n      });\n      await userEvent.click(checkboxEl, {\n        delay: 50\n      });\n      await userEvent.click(checkboxEl, {\n        delay: 50\n      });\n      expect(checkboxEl).not.toBe(firstValue);\n    });\n    await step('내용 입력', async () => {\n      const contentTestValue = 'Hello World!! 321';\n      const inputEls = canvas.getAllByRole('textbox');\n      const editorEl = inputEls[inputEls.length - 1];\n      await userEvent.type(editorEl, contentTestValue, {\n        delay: 50\n      });\n      expect(editorEl).toHaveTextContent(contentTestValue);\n    });\n    await step('저장', async () => {\n      const buttonEl = canvas.getByRole('button', {\n        name: '저장'\n      });\n      await userEvent.click(buttonEl);\n      await userEvent.click(buttonEl);\n      await waitFor(() => expect(args.fetcher).toHaveBeenCalled());\n      await waitFor(() => expect(args.revalidate).toHaveBeenCalledOnce());\n      expect(args.onSuccess).toHaveBeenCalledOnce();\n      expect(args.onFailed).not.toHaveBeenCalledOnce();\n    });\n  }\n}",...초기값_없음.parameters?.docs?.source}}},초기값_있음.parameters={...초기값_있음.parameters,docs:{...초기값_있음.parameters?.docs,source:{originalSource:"{\n  render: args => <CreateAnnouncementFormPage {...args} />,\n  args: {\n    initialBody: {\n      title: filledTitle,\n      isPinned: true,\n      content: filledContent,\n      postCategory: PostCategorySchema.Enum.MAINTENANCE\n    },\n    fetcher: fn(() => new Promise(resolve => setTimeout(resolve, 100))),\n    revalidate: fn(() => Promise.resolve()),\n    onSuccess: fn(),\n    onFailed: fn()\n  },\n  play: async ({\n    args,\n    canvasElement,\n    step\n  }) => {\n    const canvas = within(canvasElement);\n    await step('유형 선택', async () => {\n      const selectEl = canvas.getByLabelText('유형') as HTMLInputElement;\n      const firstCategory = selectEl.value;\n      await userEvent.click(selectEl);\n      await userEvent.keyboard('{ArrowDown}', {\n        delay: 50\n      });\n      await userEvent.keyboard('{ArrowDown}', {\n        delay: 50\n      });\n      await userEvent.keyboard('{Enter}', {\n        delay: 50\n      });\n      expect(selectEl).not.toBe(firstCategory);\n    });\n    await step('제목 입력', async () => {\n      const titleTestValue = 'Hello World!! 123';\n      const titleInputEl = canvas.getByLabelText('제목');\n      expect(titleInputEl).toHaveValue(filledTitle);\n      await userEvent.type(titleInputEl, titleTestValue, {\n        delay: 50\n      });\n      expect(titleInputEl).toHaveValue(`${filledTitle}${titleTestValue}`);\n    });\n    await step('공지 여부 입력', async () => {\n      const checkboxEl = canvas.getByRole('checkbox') as HTMLInputElement;\n      const firstValue = checkboxEl.checked;\n      await userEvent.click(checkboxEl, {\n        delay: 50\n      });\n      await userEvent.click(checkboxEl, {\n        delay: 50\n      });\n      await userEvent.click(checkboxEl, {\n        delay: 50\n      });\n      expect(checkboxEl).not.toBe(firstValue);\n    });\n    await step('내용 입력', async () => {\n      const contentTestValue = 'Hello World!! 321';\n      const inputEls = canvas.getAllByRole('textbox');\n      const editorEl = inputEls[inputEls.length - 1];\n      expect(editorEl).toHaveTextContent(filledContent);\n      await userEvent.type(editorEl, contentTestValue, {\n        delay: 50\n      });\n      expect(editorEl).toHaveTextContent(`${filledContent}${contentTestValue}`);\n    });\n    await step('저장', async () => {\n      const buttonEl = canvas.getByRole('button', {\n        name: '저장'\n      });\n      await userEvent.click(buttonEl);\n      await userEvent.click(buttonEl);\n      await waitFor(() => expect(args.fetcher).toHaveBeenCalled());\n      await waitFor(() => expect(args.revalidate).toHaveBeenCalledOnce());\n      expect(args.onSuccess).toHaveBeenCalledOnce();\n      expect(args.onFailed).not.toHaveBeenCalledOnce();\n    });\n  }\n}",...초기값_있음.parameters?.docs?.source}}}}}]);